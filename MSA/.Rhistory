library(Biostrings)
library(msa)
# Replace with your file path
fasta_file <- "uniprotkb_family_G_protein_coupled_rece_2025_05_25.fasta.gz"
# Read directly from gzipped file
seqs <- readAAStringSet(fasta_file)
# Quick check
seqs
# Filter sequences longer than 250 amino acids
seqs_filtered <- seqs[width(seqs) > 250]
# Check the filtered object
seqs_filtered
# Your target sequence
target_seq <- "MANFTPVNGSSGNQSVRLVTSSSHNRYETVEMVFIATVTGSLSLVTVVGNILVMLSIKVNRQLQTVNNYFLFSLACADLIIGAFSMNLYTVYIIKGYWPLGAVVCDLWLALDYVVSNASVMNLLIISFDRYFCVTKPLTYPARRTTKMAGLMIAAAWVLSFVLWAPAILFWQFVVGKRTVPDNQCFIQFLSNPAVTFGTAIAAFYLPVVIMTVLYIHISLASRSRVHKHRPEGPKEKKAKTLAFLKSPLMKQSVKKPPPGEAAREELRNGKLEEAPPPALPPPPRPVADKDTSNESSSGSATQNTKERPATELSTTEATTPAMPAPPLQPRALNPASRWSKIQIVTKQTGNECVTAIEIVPATPAGMRPAANVARKFASIARNQVRKKRQMAARERKVTRTIFAILLAFILTWTPYNVMVLVNTFCQSCIPDTVWSIGYWLCYVNSTINPACYALCNATFKKTFRHLLLCQYRNIGTAR"
# Search (exact match)
matches <- vmatchPattern(target_seq, seqs_filtered)
# Check results
matches
library(Biostrings)
library(msa)
library(future.apply)
# Set up parallel plan for 28 CPUs
plan(multisession, workers = 28)
# Function to calculate conservation score (per site) in parallel
conservation_scores <- function(alignment) {
aln_matrix <- as.matrix(alignment)
scores <- future_apply(aln_matrix, 2, function(column) {
freqs <- table(column[column != "-"])
if (length(freqs) == 0) return(0)
max(freqs) / sum(freqs)
})
return(scores)
}
# Example usage
fasta_file <- "uniprotkb_family_G_protein_coupled_rece_2025_05_25.fasta.gz"
seqs <- readAAStringSet(fasta_file)
seqs_filtered <- seqs[width(seqs) > 250]
